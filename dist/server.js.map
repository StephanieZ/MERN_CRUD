{"version":3,"sources":["../server/server.js"],"names":["SourceMapSupport","install","app","use","express","static","bodyParser","json","db","get","req","res","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","console","log","status","message","post","newIssue","body","created","Date","err","Issue","validateIssue","insertOne","result","_id","insertedId","limit","next","savedIssue","MongoClient","connect","connection","listen"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;AACA;;;;;;AAEAA,2BAAiBC,OAAjB;;AAEA,MAAMC,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQC,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAH,IAAIC,GAAJ,CAAQG,qBAAWC,IAAX,EAAR;;AAEA,IAAIC,EAAJ;;AAEAN,IAAIO,GAAJ,CAAQ,aAAR,EAAuB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACnCH,KAAGI,UAAH,CAAc,QAAd,EAAwBC,IAAxB,GAA+BC,OAA/B,GACAC,IADA,CACKC,UAAU;AACb,UAAMC,WAAW,EAAEC,aAAaF,OAAOG,MAAtB,EAAjB;AACAR,QAAIJ,IAAJ,CAAS,EAAEa,WAAWH,QAAb,EAAuBI,SAASL,MAAhC,EAAT;AACD,GAJD,EAKAM,KALA,CAKMC,SAAS;AACbC,YAAQC,GAAR,CAAYF,KAAZ;AACAZ,QAAIe,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAAEoB,SAAU,0BAAyBJ,KAAM,EAA3C,EAArB;AACD,GARD;AASD,CAVD;;AAaArB,IAAI0B,IAAJ,CAAS,aAAT,EAAwB,CAAClB,GAAD,EAAMC,GAAN,KAAc;AACpC,QAAMkB,WAAWnB,IAAIoB,IAArB;AACAD,WAASE,OAAT,GAAmB,IAAIC,IAAJ,EAAnB;AACA,MAAI,CAACH,SAASH,MAAd,EAAsB;AACpBG,aAASH,MAAT,GAAkB,KAAlB;AACD;AACD,QAAMO,MAAMC,gBAAMC,aAAN,CAAoBN,QAApB,CAAZ;AACA,MAAII,GAAJ,EAAS;AACPtB,QAAIe,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAAEoB,SAAU,oBAAmBM,GAAI,EAAnC,EAArB;AACA;AACD;;AAEDzB,KAAGI,UAAH,CAAc,QAAd,EAAwBwB,SAAxB,CAAkCP,QAAlC,EAA4Cd,IAA5C,CAAiDsB,UAC/C7B,GAAGI,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6B,EAAEyB,KAAKD,OAAOE,UAAd,EAA7B,EAAyDC,KAAzD,CAA+D,CAA/D,EACAC,IADA,EADF,EAIA1B,IAJA,CAIK2B,cAAc;AACjB/B,QAAIJ,IAAJ,CAASmC,UAAT;AACD,GAND,EAOApB,KAPA,CAOMC,SAAS;AACbC,YAAQC,GAAR,CAAYF,KAAZ;AACAZ,QAAIe,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAAEoB,SAAU,0BAAyBJ,KAAM,EAA3C,EAArB;AACD,GAVD;AAWD,CAvBD;;AAyBAoB,qBAAYC,OAAZ,CAAoB,kCAApB,EAAwD7B,IAAxD,CAA6D8B,cAAc;AACzErC,OAAKqC,UAAL;AACA3C,MAAI4C,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACrBtB,YAAQC,GAAR,CAAY,0BAAZ;AACD,GAFD;AAGD,CALD,EAKGH,KALH,CAKSC,SAAS;AAChBC,UAAQC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AACD,CAPD","file":"server.js","sourcesContent":["import express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport { MongoClient } from 'mongodb';\r\nimport Issue from './issue.js';\r\nimport 'babel-polyfill';\r\nimport SourceMapSupport from 'source-map-support';\r\n\r\nSourceMapSupport.install();\r\n\r\nconst app = express();\r\napp.use(express.static('static'));\r\napp.use(bodyParser.json());\r\n\r\nlet db;\r\n\r\napp.get('/api/issues', (req, res) => {\r\n  db.collection('issues').find().toArray().\r\n  then(issues => {\r\n    const metadata = { total_count: issues.length };\r\n    res.json({ _metadata: metadata, records: issues });\r\n  }).\r\n  catch(error => {\r\n    console.log(error);\r\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\r\n  });\r\n});\r\n\r\n\r\napp.post('/api/issues', (req, res) => {\r\n  const newIssue = req.body;\r\n  newIssue.created = new Date();\r\n  if (!newIssue.status) {\r\n    newIssue.status = 'New';\r\n  }\r\n  const err = Issue.validateIssue(newIssue);\r\n  if (err) {\r\n    res.status(422).json({ message: `Invalid request: ${err}` });\r\n    return;\r\n  }\r\n\r\n  db.collection('issues').insertOne(newIssue).then(result =>\r\n    db.collection('issues').find({ _id: result.insertedId }).limit(1).\r\n    next()\r\n  ).\r\n  then(savedIssue => {\r\n    res.json(savedIssue);\r\n  }).\r\n  catch(error => {\r\n    console.log(error);\r\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\r\n  });\r\n});\r\n\r\nMongoClient.connect('mongodb://localhost/issuetracker').then(connection => {\r\n  db = connection;\r\n  app.listen(3000, () => {\r\n    console.log('App started on port 3000');\r\n  });\r\n}).catch(error => {\r\n  console.log('ERROR:', error);\r\n});\r\n"]}