{"version":3,"sources":["../server/server.js"],"names":["SourceMapSupport","install","app","use","express","static","bodyParser","json","process","env","NODE_ENV","webpack","require","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","log","console","get","req","res","db","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","status","message","post","newIssue","body","created","Date","err","Issue","validateIssue","insertOne","result","_id","insertedId","limit","next","MongoClient","connect","connection","listen"],"mappings":"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","file":"server.js","sourcesContent":["import express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport {MongoClient} from 'mongodb';\r\nimport Issue from './issue.js';\r\nimport 'babel-polyfill';\r\nimport SourceMapSupport from 'source-map-support';\r\n\r\nSourceMapSupport.install();\r\n\r\nconst app = express();\r\napp.use(express.static('static'));\r\napp.use(bodyParser.json());\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  const webpack = require('webpack');\r\n  const webpackDevMiddleware = require('webpack-dev-middleware');\r\n  const webpackHotMiddleware = require('webpack-hot-middleware');\r\n\r\n  const config = require('../webpack.config');\r\n  config.entry.app.push('webpack-hot-middleware/client', 'webpack/hot/only-dev-server');\r\n  config.plugins.push(new webpack.HotModuleReplacementPlugin());\r\n\r\n  const bundler = webpack(config);\r\n  app.use(webpackDevMiddleware(bundler, { noInfo: true }));\r\n  app.use(webpackHotMiddleware(bundler, { log: console.log }));\r\n}\r\n\r\napp.get('/api/issues', (req, res) => {\r\n  db.collection('issues').find().toArray().then(issues => {\r\n    const metadata = { total_count: issues.length };\r\n    res.json({ _metadata: metadata, records: issues })\r\n  }).catch(error => {\r\n    console.log(error);\r\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\r\n  });\r\n});\r\n\r\n\r\n\r\napp.post('/api/issues', (req, res) => {\r\n  const newIssue = req.body;\r\n  newIssue.created = new Date();\r\n  if (!newIssue.status)\r\n    newIssue.status = 'New';\r\n\r\n  const err = Issue.validateIssue(newIssue)\r\n  if (err) {\r\n    res.status(422).json({ message: `Invalid request: ${err}` });\r\n    return;\r\n  }\r\n\r\n  db.collection('issues').insertOne(newIssue).then(result =>\r\n    db.collection('issues').find({ _id: result.insertedId }).limit(1).next()\r\n  ).then(newIssue => {\r\n    res.json(newIssue);\r\n  }).catch(error => {\r\n    console.log(error);\r\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\r\n  });\r\n});\r\n\r\nlet db;\r\nMongoClient.connect('mongodb://localhost/issuetracker').then(connection => {\r\n  db = connection;\r\n  app.listen(3000, () => {\r\n    console.log('App started on port 3000');\r\n  });\r\n}).catch(error => {\r\n  console.log('ERROR:', error);\r\n});\r\n"]}